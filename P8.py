#Find the largest product from 13 adjacent digits in this 1000-digit number

from time_profiler import timer

@timer()
def get_max_product(consecutive): 
    number = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

    product = 1

    last_zero = 0

    for i in range(consecutive-1, 0-1, -1):
        if int(number[i]) == 0: 
            last_zero = i
            product = 0
            break
        product*=int(number[i])
        highest_product = product

    i = consecutive+last_zero

    while i < len(number):
        if int(number[i]) != 0 and int(number[i-consecutive]) != 0: 
            if product != 0: product = product * (int(number[i])) / (int(number[i-consecutive]))
            else:
                product = 1
                for j in range(i-consecutive+1,i+1):
                    product *= int(number[j])
            if product > highest_product: highest_product = product
            
        else: 
            i+=consecutive
            product = 0
        i+=1
    return highest_product

print(int(get_max_product(13)))